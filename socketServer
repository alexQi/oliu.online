#!/usr/bin/env php
<?php

class socketServer
{
    public static $instance;
    public $runtimePath;
    public $socket;
    public $redis;

    /**
     * 检测并创建项目运行时目录
     */
    private function checkRuntime()
    {
        $this->runtimePath = dir(__DIR__)->path.'/socketService/runtime';

        if(!is_dir($this->runtimePath))
        {
            mkdir($this->runtimePath,0755);
        }
        if(!is_dir($this->runtimePath.'/logs'))
        {
            mkdir($this->runtimePath.'/logs',0755);
        }
    }

    public function __construct()
    {
        $this->checkRuntime();
        #初始化redis连接
        $this->connectRedis();

        $socket = new swoole_websocket_server("0.0.0.0", 9501);
        $socket->set(array(
            'worker_num'  => 8,
            'daemonize'   => false,
            'max_request' => 10000,
            'debug_mode'  => 1,
            'task_worker_num' => 1,
            'dispatch_mode'   => 2,
            'log_file'        => $this->runtimePath."swoole.log",
        ));

        // bind callback
        $socket->on('Start',  array($this, 'onStart'));
        $socket->on('Connect',array($this, 'onConnect'));
        $socket->on('Open',   array($this, 'onOpen'));
        $socket->on('Message',array($this, 'onMessage'));
        $socket->on('Close',  array($this, 'onClose'));
        $socket->on('Task',   array($this, 'onTask'));
        $socket->on('Finish', array($this, 'onFinish'));

        $socket->start();
    }

    /**
     * 连接redis
     * @param $config
     */
    public function connectRedis($config=array()){
        $redis = new redis();
        $redis->connect('127.0.0.1', 6379);
        $redis->auth('');
        return $this->redis = $redis;
    }

    /**
     * 开启服务
     * @param $serv
     */
    public function onStart($serv ) {
        echo "----swoole server start----\n";
    }

    public function onOpen(swoole_websocket_server $serv,$frame){
        swoole_timer_tick(10000, function ($interval) use ($serv,$frame) {
            $data['type']         = 'time';
            $data['data']['time'] = time();
            $serv->push($frame->fd,json_encode($data));
        });
    }

    public function onMessage(swoole_websocket_server $serv, $frame)
    {
        echo "客户端ID:$frame->fd 发送消息 \n";
        //判断用户消息类型
        $res = json_decode($frame->data,true);
        switch ($res['type'])
        {
            case 'init':
                //判断当前用户是否存在未读的消息

                //存储用户信息到redis
                $this->redis->set('init_user_'.$res['data']['userId'],$frame->fd);
                $this->redis->set('init_fd_'.$frame->fd,$res['data']['userId']);
                break;

            case 'message':
                //存储用户消息
                $param['from_user_id'] = $res['data']['userId'];
                $param['to_user_id']   = $res['data']['toUserId'];
                $param['content']      = $res['data']['content'];
                $param['create_time']  = time();

                $this->redis->sAdd('message_send_'.$res['data']['userId'],$param); //发送方记录
                $this->redis->lPush('message_receive_'.$res['data']['toUserId'],json_encode($param)); //接收方记录
                $this->redis->sAdd('user_message_'.$res['data']['userId'],$res['data']['toUserId']);

//                $serv->task(json_encode($param), -1);

                $param['create_time'] = date('H:i:s',$param['create_time']);
                $send['type'] = 'message';
                $send['data'] = $param;
                $fd = $this->redis->get('init_user_'.$send['data']['to_user_id']);

                if ($fd){
                    $serv->push((int)$fd,json_encode($send));
                }
                break;

            default:
                //nothing to do
                break;
        }

        //获取用户未读消息总数
        $totalNotRead = $this->redis->lLen('message_receive_'.$res['data']['userId']);
        $data['type']        = 'totalNotRead';
        $data['data']['num'] = $totalNotRead;
        $serv->push($frame->fd,json_encode($data));
    }

    /**
     * 链接时存储客户端id
     * @param $serv
     * @param $fd
     * @param $from_id
     */
    public function onConnect( $serv, $fd, $from_id ) {
        //做其他处理
    }

    /**
     * 客户端关闭
     * @param $serv
     * @param $fd
     * @param $from_id
     */
    public function onClose( $serv, $fd, $from_id ) {
        $userId = $this->redis->get('init_fd_'.$fd);

        //删除用户ID存储信息
        $this->redis->del('init_fd_'.$fd,'init_user_'.$userId);

        echo "Client {$fd} close connection\n";
    }

    /**
     * 开启任务发送消息
     * @param $serv
     * @param $task_id
     * @param $from_worker_id
     * @param $data
     */
    public function onTask($serv,$task_id,$from_worker_id, $data) {
        $param = json_decode($data,true);
        $param['create_time'] = date('H:i:s',$param['create_time']);
        $send['type'] = 'message';
        $send['data'] = $param;
        $fd = $this->redis->get('init_user_'.$send['data']['to_user_id']);

//        echo ('接收端ID:'.$fd);
//        var_dump($send);
        if ($fd){
            $serv->push((int)$fd,json_encode($send));
        }
    }

    /**
     * 当结束时
     * @param $serv
     * @param $task_id
     * @param $data
     */
    public function onFinish($serv,$task_id, $data) {
        echo "Task {$task_id} finish\n";
        echo "Result: {$data}\n";
    }

    public static function getInstance()
    {
        if (!self::$instance) {
            self::$instance = new socketServer();
        }
        return self::$instance;
    }
}

socketServer::getInstance();
