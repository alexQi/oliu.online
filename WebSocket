#!/usr/bin/env php
<?php

require(__DIR__ . '/Colors.php');

class WebSocket
{
    /* @var $application */
    /* @var $runTimePath */
    /* @var $redis Redis */
    public static $application;
    public $runTimePath;
    public $colors;
    public $redis;


    /**
     * 检测并创建项目运行时目录
     * @return bool
     */
    private function initRuntime()
    {
        $result = true;
        $this->runTimePath = dir(__DIR__)->path.'/socketService/runtime/logs/swoole';

        if(!is_dir($this->runTimePath))
        {
            if (mkdir($this->runTimePath,0755))
            {
                $result = false;
            }
        }

        return $result;
    }

    /**
     * 连接redis
     * @param $config
     */
    public function connectRedis($config=array()){
        $redis = new redis();
        $redis->connect('127.0.0.1', 6379);
        $redis->auth('6da192c7dd56a5ba917c59d2e723911a');
        return $this->redis = $redis;
    }

    /**
     * WebSocket constructor.
     */
    public function __construct()
    {
        // init base setting
        $this->initRuntime();
        $this->colors = new Colors();

        // init swoole_websocket_server
        $socket = new swoole_websocket_server("0.0.0.0", 9501);
        $socket->set([
            'worker_num'      => 4,
            'daemonize'       => false,
            'max_request'     => 10000,
            'debug_mode'      => 1,
            'task_worker_num' => 4,
            'dispatch_mode'   => 2,
            'log_file'        => $this->runTimePath."/swoole.log",

            /**
             * 心跳检测也可使用 $server->heartbeat();
             */

            # 心跳检测
            // 'heartbeat_check_interval' => 5,
            // 'heartbeat_idle_time'      => 10,
        ]);

        // bind callback
        $socket->on('Start',        [$this, 'onStart']);
        $socket->on('ManagerStart', [$this, 'onManagerStart']);
        $socket->on('WorkerStart',  [$this, 'onWorkerStart']);
        $socket->on('Connect',      [$this, 'onConnect']);
        $socket->on('Message',      [$this, 'onMessage']);
        $socket->on('Task',         [$this, 'onTask']);
        $socket->on('Finish',       [$this, 'onFinish']);
        $socket->on('Close',        [$this, 'onClose']);

        $socket->start();
    }

    /**
     * @param swoole_websocket_server $server
     */
    public function onStart($server)
    {
        swoole_set_process_name('WebSocketMaster');
        $cliNotice = "[ PID : $server->master_pid ] ----> SOCKET Server Start , Active master process ... \r\n";
        echo $this->colors->getColoredString($cliNotice,'red');
    }

    /**
     * @param $server
     */
    public function onManagerStart($server)
    {
        swoole_set_process_name('WebSocketManager');
        $cliNotice = "[ MID : $server->manager_pid ] ----> Active manage process ... \r\n";
        echo $this->colors->getColoredString($cliNotice,'cyan');
    }

    /**
     * @param $server
     * @param $worker_id
     */
    public function onWorkerStart($server,$worker_id)
    {
        swoole_set_process_name('WebSocketWorker');
        $cliNotice = "[ WID : $worker_id ] ----> initialize worker process ... \r\n";
        echo $this->colors->getColoredString($cliNotice,'green');

        #初始化redis连接
        $this->connectRedis();
    }

    /**
     * @param $server
     * @param $fd
     * @param $from_id
     */
    public function onConnect($server,$fd,$from_id)
    {
        $cliNotice = "[ RID : $from_id ] ----> Client $fd Has been connected ... \r\n";
        echo $this->colors->getColoredString($cliNotice,'blue');
    }

    /**
     * 接受消息回调
     * @var $redis Redis
     * @param swoole_websocket_server $server
     * @param swoole_websocket_frame $frame
     */
    public function onMessage(swoole_websocket_server $server, swoole_websocket_frame $frame)
    {
        $cliNotice = "[ CID : $frame->fd ] ----> Receive Opcode:{$frame->opcode},Fin:{$frame->finish}, Data:{$frame->data} \r\n";
        echo $this->colors->getColoredString($cliNotice,'yellow');

        //判断用户消息类型
        $res = json_decode($frame->data,true);
        switch ($res['type'])
        {
            case 'init':
                //存储用户信息到redis
                $this->redis->set('init_user_'.$res['data']['userId'],$frame->fd);
                $this->redis->set('init_fd_'.$frame->fd,$res['data']['userId']);
                break;

            case 'message':
                //存储用户消息
                $param['from_user_id'] = $res['data']['userId'];
                $param['to_user_id']   = $res['data']['toUserId'];
                $param['content']      = $res['data']['content'];
                $param['create_time']  = time();

                $this->redis->sAdd('message_send_'.$res['data']['userId'],json_encode($param)); //发送方记录
                $this->redis->lPush('message_receive_'.$res['data']['toUserId'],json_encode($param)); //接收方记录

                // send receive_user_id to task
                $server->task($res['data']['toUserId']);
                break;

            default:
                //nothing to do
                break;
        }
    }

    /**
     * @param swoole_websocket_server $server
     * @param $task_id
     * @param $src_worker_id
     * @param $data
     * @return bool
     */
    public function onTask(swoole_websocket_server $server, $task_id,$src_worker_id,$data)
    {
        $cliNotice = "[ SWID : $src_worker_id <-> TID : $task_id ] ----> Execute Task, Opcode:{$data->opcode},Fin:{$data->finish}, Data:{$data->data} \r\n";
        echo $this->colors->getColoredString($cliNotice,'yellow');

        //判断未读消息数量
        $notReadNum = $this->redis->lLen('message_receive_'.$data);

        if ($notReadNum>0)
        {
            $fd = (int) $this->redis->get('init_user_'.$data);

            if ($server->exist($fd)){
                $send['type']        = 'totalNotRead';
                $send['data']['num'] = $notReadNum;
                $server->push($fd,json_encode($send));
            }

            $response = [];
            while ($notRead = $this->redis->lPop('message_receive_'.$data))
            {
                $param = json_decode($notRead,true);
                $param['create_time'] = date('H:i:s',$param['create_time']);
                $send['type'] = 'message';
                $send['data'] = $param;

                $response[] = $send;
            }

            if ($server->exist($fd))
            {
                $server->push($fd,json_encode($response));
            }else{
                //client has been closed
                $this->redis->lPush('message_receive_'.$data,$notRead); //接收方记录
            }
        }

        return true;
    }

    public function onFinish(swoole_websocket_server $server,$task_id,$data)
    {
        $cliNotice = "[ TID : $task_id ] ----> Task Finished, Data:$data \r\n";
        echo $this->colors->getColoredString($cliNotice,'brown');
    }

    /**
     * @param swoole_websocket_server $server
     * @param $fd
     * @param $reactorId
     */
    public function onClose(swoole_websocket_server $server,$fd,$reactorId)
    {
        $cliNotice = "[ RID : $reactorId ] ----> ClientId $fd Has been closed \r\n";
        echo $this->colors->getColoredString($cliNotice,'brown');
    }

    /**
     * 运行程序
     * @return WebSocket
     */
    public static function run()
    {
        if (!self::$application) {
            self::$application = new WebSocket();
        }
        return self::$application;
    }
}

WebSocket::run();